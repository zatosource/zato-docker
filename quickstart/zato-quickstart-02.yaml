
- name: Install NodeJS (for testing) (02)
  when: zato_run_internal_tests or zato_install_playwright
  shell: |
    curl -sL https://deb.nodesource.com/setup_16.x | bash -
    apt-get install nodejs -y

- name: Install Playwright (for testing) (02)
  when: zato_install_playwright
  become: true
  become_user: "vagrant"
  shell: |
    npm i -D @playwright/test &&
    NODE_TLS_REJECT_UNAUTHORIZED="0" npx playwright install &&
    pip install playwright &&
    echo "export PATH=$PATH:~/.local/bin" >> ~/.bashrc

- name: Install Geany (for Playwright) (02)
  when: zato_install_playwright
  shell: |
    apt-get install geany -y

- name: Clean up extra installation artifacts (02)
  shell: |
    rm -rf /var/crash/*

- name: Make sure that PostgreSQL is started (02)
  when: zato_use_postgresql
  shell: |
    DEBIAN_FRONTEND=noninteractive service postgresql restart

- name: Run base scripts (02)
  shell: |
    # Make sure that Redis is started
    DEBIAN_FRONTEND=noninteractive service redis-server restart

    # Regenerate host SSH keys
    rm -v /etc/ssh/ssh_host_*
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure openssh-server

    # Restart the SSH server after regenerating its keys
    DEBIAN_FRONTEND=noninteractive service ssh restart

- name: Drop the SQL database if it exists (PG -> main) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_db:
    state: absent
    force: "yes"
    name: "{{ zato_db_main }}"

- name: Drop the SQL database if it exists (PG -> pub/sub) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_db:
    state: absent
    force: "yes"
    name: "{{ zato_db_pubsub }}"

- name: Create the SQL database (PG -> main) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_db:
    state: present
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    name: "{{ zato_db_main }}"

- name: Create the SQL database (PG -> pub/sub) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_db:
    state: present
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
    name: "{{ zato_db_pubsub }}"

- name: Drop the SQL user if it exists (PG -> main) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_user:
    state: absent
    fail_on_user: "no"
    name: "{{ zato_db_username_main }}"

- name: Drop the SQL user if it exists (PG -> pub/sub) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_user:
    state: absent
    fail_on_user: "no"
    name: "{{ zato_db_username_pubsub }}"

- name: Create the SQL user (PG -> main) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_user:
    state: present
    db: "{{ zato_db_main }}"
    name: "{{ zato_db_username_main }}"
    password: "{{ zato_db_password_main }}"
    encrypted: "yes"
    priv: "ALL"
    comment: "Main Zato user for PostgreSQL"

- name: Create the SQL user (PG -> pub/sub) (02)
  when: zato_use_postgresql
  become: true
  become_user: "postgres"
  community.postgresql.postgresql_user:
    state: present
    db: "{{ zato_db_pubsub }}"
    name: "{{ zato_db_username_pubsub }}"
    password: "{{ zato_db_password_pubsub }}"
    encrypted: "yes"
    priv: "ALL"
    comment: "Zato publish/subscribe user for PostgreSQL"

- name: Grant access to the SQL user (PG -> main) (02)
  when: zato_use_postgresql
  community.postgresql.postgresql_pg_hba:
    create: "yes"
    dest: "{{ pg_hba_conf_path }}"
    contype: host
    users: "{{ zato_db_username_main }}"
    source: all
    databases: "{{ zato_db_main }}, postgres"
    method: md5

- name: Grant access to the SQL user (PG -> pub/sub) (02)
  when: zato_use_postgresql
  community.postgresql.postgresql_pg_hba:
    create: "yes"
    dest: "{{ pg_hba_conf_path }}"
    contype: host
    users: "{{ zato_db_username_pubsub }}"
    source: all
    databases: "{{ zato_db_pubsub }}, postgres"
    method: md5

- name: Configure PostgreSQL to listen on all interfaces (02)
  when: zato_use_postgresql
  replace:
    path: "{{ pg_conf_path }}"
    regexp: "#listen_addresses = 'localhost'"
    replace: "listen_addresses = '*'"

- name: Enable password-based SSH connections (02)
  replace:
    path: "/etc/ssh/sshd_config"
    regexp: "PasswordAuthentication no"
    replace: "PasswordAuthentication yes"

- name: Allow for SSH connections to be established from anywhere (02)
  replace:
    path: "/etc/ssh/sshd_config"
    regexp: "#ListenAddress 0.0.0.0"
    replace: "ListenAddress 0.0.0.0"

- name: Restart PostgreSQL after its configuration was changed (02)
  when: zato_use_postgresql
  shell: |
    DEBIAN_FRONTEND=noninteractive service postgresql restart

- name: Restart the SSH server after its configuration was changed (02)
  shell: |
    DEBIAN_FRONTEND=noninteractive service ssh restart

- name: Set the SSH password for user 'zato' (02)
  user:
    name: zato
    password: "{{ zato_password or zato_ssh_user_password | password_hash('sha512') }}"

- name: Make sure all the previous processes started by user zato are stopped (02)
  shell: |
    pkill --signal 9 -u zato || true

- name: Create extra user and add Zato to its group 1 (02)
  when: zato_create_extra_user_01
  shell: |
    groupadd {{ zato_create_extra_user_01 }} \
       --gid {{ zato_create_extra_user_01_gid }} || true
    useradd {{ zato_create_extra_user_01 }}     \
      --uid {{ zato_create_extra_user_01_uid }} \
      --gid {{ zato_create_extra_user_01_gid }} || true
    usermod -aG {{ zato_create_extra_user_01 }} zato

- name: Create extra user and add Zato to its group 2 (02)
  when: zato_create_extra_user_02
  shell: |
    groupadd {{ zato_create_extra_user_02 }} \
       --gid {{ zato_create_extra_user_02_gid }} || true
    useradd {{ zato_create_extra_user_02 }}     \
      --uid {{ zato_create_extra_user_02_uid }} \
      --gid {{ zato_create_extra_user_02_gid }} || true
    usermod -aG {{ zato_create_extra_user_02 }} zato

- name: Create extra user and add Zato to its group 3 (02)
  when: zato_create_extra_user_03
  shell: |
    groupadd {{ zato_create_extra_user_03 }}
       --gid {{ zato_create_extra_user_03_gid }} || true
    useradd {{ zato_create_extra_user_03 }}     \
      --uid {{ zato_create_extra_user_03_uid }} \
      --gid {{ zato_create_extra_user_03_gid }} || true
    usermod -aG {{ zato_create_extra_user_03 }} zato

- name: Create extra user and add Zato to its group 4 (02)
  when: zato_create_extra_user_04
  shell: |
    groupadd {{ zato_create_extra_user_04 }} \
       --gid {{ zato_create_extra_user_04_gid }} || true
    useradd {{ zato_create_extra_user_04 }}     \
      --uid {{ zato_create_extra_user_04_uid }} \
      --gid {{ zato_create_extra_user_04_gid }} || true
    usermod -aG {{ zato_create_extra_user_04` }} zato

- name: Create extra user and add Zato to its group 5 (02)
  when: zato_create_extra_user_05
  shell: |
    groupadd {{ zato_create_extra_user_05 }} \
       --gid {{ zato_create_extra_user_05_gid }} || true
    useradd {{ zato_create_extra_user_05 }}     \
      --uid {{ zato_create_extra_user_05_uid }} \
      --gid {{ zato_create_extra_user_05_gid }} || true
    usermod -aG {{ zato_create_extra_user_05 }} zato

- name: Make sure any previous environment is deleted (02)
  shell: |
    rm -rf {{ zato_env_path }}

- name: Create a quickstart environment (02)
  become: true
  become_user: "zato"
  shell: |
    PATH=$PATH:~/current/bin &&
    {{ zato_env_path }}/zato-qs-stop.sh || true &&
    rm -rf {{ zato_env_path }} &&
    Zato_Server_To_Scheduler_Use_TLS=False zato quickstart \
        {{ zato_env_path }} \
        --odb-type {{ zato_db_type }} \
        --odb-host {{ zato_db_host }} \
        --odb-port {{ zato_db_port }} \
        --odb-db-name {{ zato_db_main }} \
        --odb-user {{ zato_db_username_main }} \
        --odb-password '{{ zato_db_password_main }}' \
        --cluster-name '{{ zato_cluster_name }}' \
        --preamble-script="{{ zato_start_preamble }}" \
        --verbose

- name: Enable Redis (02)
  when: zato_enable_redis
  become: true
  become_user: "zato"
  replace:
    path: "{{ zato_env_path }}/server1/config/repo/server.conf"
    regexp: "^host=$"
    replace: "host=localhost"

- name: Enable internal services (if testing) (02)
  when: zato_run_internal_tests
  become: true
  become_user: "zato"
  replace:
    path: "{{ zato_env_path }}/server1/config/repo/server.conf"
    regexp: "service_invoker_allow_internal="
    replace: "service_invoker_allow_internal=/zato/api/invoke/{service_name}"

- name: Enable SSO (if testing) (02)
  when: zato_run_internal_tests
  become: true
  become_user: "zato"
  replace:
    path: "{{ zato_env_path }}/server1/config/repo/server.conf"
    regexp: "sso=False"
    replace: "sso=True"

- name: Prepare the work directory for configuration details (02)
  shell: |
    mkdir -p /opt/zato/env/details
    chown -R zato:zato /opt/zato/env/details

- name: Store the environment's details in JSON (02)
  become: true
  become_user: "zato"
  copy:
    content: |
      {{ environment_config | to_nice_json }}
    dest: ~/env/details/all-zato-env-details.json

- name: Save SSH credentials (02)
  local_action: copy content="{{ zato_password or zato_ssh_user_password }}" dest={{ zato_ssh_user_password_file }}

- name: Save Dashboard credentials (02)
  local_action: copy content="{{ zato_password or zato_dashboard_admin_password }}" dest={{ zato_dashboard_admin_password_file }}

- name: Save IDE credentials
  local_action: copy content="{{ zato_password or zato_ide_publisher_password }}" dest={{ zato_ide_publisher_password_file }}

- name: Save database user's credentials (main) (02)
  local_action: copy content="{{ zato_db_password_main }}" dest={{ zato_db_password_main_file }}

- name: Save database user's credentials (pub/sub) (02)
  local_action: copy content="{{ zato_db_password_pubsub }}" dest={{ zato_db_password_pubsub_file }}

- name: Copy SSH material (02)
  when: zato_map_ssh_dir
  become: true
  become_user: "root"
  shell: |
    rm -rf /opt/zato/.ssh
    cp -r /tmp/zato-host-ssh-dir/ /opt/zato/.ssh
    chown -R zato:zato /opt/zato/.ssh/
    chmod 400 /opt/zato/.ssh/*
    chmod 700 /opt/zato/.ssh

- name: Set Bash defaults and symlinks (zato) (02)
  become: true
  become_user: "zato"
  shell: |
    # Create symlinks for backward compatibility
    cd /opt/zato/current && git pull
    ln -sfv {{ zato_ssh_user_password_file }} ~/zato_user_password
    ln -sfv {{ zato_dashboard_admin_password_file }} ~/web_admin_password
    ln -sfv {{ zato_ide_publisher_password_file }} ~/zato_ide_publisher_password

    # Set Bash defaults
    echo "" >> ~/.bashrc_zato
    echo ":set tabstop=4" >> ~/.vimrc
    echo ":set shiftwidth=4" >> ~/.vimrc
    echo ":set expandtab" >> ~/.vimrc
    echo ":set noincsearch" >> ~/.vimrc
    echo "export PATH=$PATH:~/current/bin" >> ~/.bashrc
    echo "source /usr/share/mc/bin/mc.sh" >> ~/.bashrc
    echo "tail -f -n 500 ~/env/qs-1/server1/logs/access.log" >> ~/.bash_history
    echo "tail -f -n 500 ~/env/qs-1/server1/logs/server.log" >> ~/.bash_history
    echo 'SELECTED_EDITOR="/usr/bin/vim.basic"' >> ~/.selected-editor

    echo "export PYTHONPATH=$PYTHONPATH:/opt/zato/current/extlib" >> ~/.bashrc
    echo "export ZATO_HOT_DEPLOY_DIR=/opt/hot-deploy/services" >> ~/.bashrc
    echo "export ZATO_USER_CONF_DIR=/opt/hot-deploy/user-conf:/tmp/zato-user-conf" >> ~/.bashrc
    echo "export ZATO_HOT_DEPLOY_PREFER_SNAPSHOTS={{ zato_hot_deploy_prefer_snapshots }}" >> ~/.bashrc
    echo "export Zato_Is_Quickstart={{ zato_is_quickstart }}" >> ~/.bashrc
    echo "export Zato_Log_Env_Details={{ zato_log_env_details }}" >> ~/.bashrc
    echo "export Zato_TLS_Verify={{ zato_tls_verify }}" >> ~/.bashrc

    echo "source ~/.bashrc_zato" >> ~/.bashrc

- name: Set Bash defaults (root) (02)
  become: true
  become_user: "root"
  shell: |
    echo ":set tabstop=4" >> ~/.vimrc
    echo ":set shiftwidth=4" >> ~/.vimrc
    echo ":set expandtab" >> ~/.vimrc
    echo ":set noincsearch" >> ~/.vimrc
    echo "source /usr/share/mc/bin/mc.sh" >> ~/.bashrc
    echo "sudo su - zato" >> ~/.bash_history
    echo 'SELECTED_EDITOR="/usr/bin/vim.basic"' >> ~/.selected-editor

- name: Set Bash defaults (root-level user) (02)
  when: zato_root_level_user
  become: true
  become_user: "root"
  shell: |
    echo ":set tabstop=4" >> ~{{ zato_root_level_user }}/.vimrc
    echo ":set shiftwidth=4" >> ~{{ zato_root_level_user }}/.vimrc
    echo ":set expandtab" >> ~{{ zato_root_level_user }}/.vimrc
    echo ":set noincsearch" >> ~{{ zato_root_level_user }}/.vimrc
    echo "source /usr/share/mc/bin/mc.sh" >> ~{{ zato_root_level_user }}/.bashrc
    echo "sudo su - zato" >> ~{{ zato_root_level_user }}/.bash_history
    echo 'SELECTED_EDITOR="/usr/bin/vim.basic"' >> ~{{ zato_root_level_user }}/.selected-editor

- name: Prepare hot-deployment dirs and run pip (02)
  become: true
  become_user: "root"
  shell: |
    mkdir -p /opt/hot-deploy/python-reqs
    mkdir -p /opt/hot-deploy/services
    mkdir -p /opt/hot-deploy/user-conf
    mkdir -p /opt/hot-deploy/enmasse
    chown -R zato:zato /opt/hot-deploy
    ~/current/bin/pip install -r {{ zato_python_reqs_opt }} || true
    ~/current/bin/pip install -r {{ zato_python_reqs_tmp }} || true

- name: Prepare startup scripts (02)
  become: true
  become_user: "root"
  shell: |
    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-server-fg.sh
    echo "~/current/bin/pip install --upgrade -r /opt/hot-deploy/python-reqs/requirements.txt || true" >> {{ zato_env_path }}/start-server-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/server1 --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-server-fg.sh

    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-web-admin-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/web-admin --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-web-admin-fg.sh

    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-load-balancer-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/load-balancer --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-load-balancer-fg.sh

    echo "{{ zato_start_preamble }}" > {{ zato_env_path }}/start-scheduler-fg.sh
    echo "~/current/bin/zato start {{ zato_env_path }}/scheduler --fg --env-file /opt/hot-deploy/enmasse/env.ini" >> {{ zato_env_path }}/start-scheduler-fg.sh

    chown zato:zato {{ zato_env_path }}/start-*.sh
    chmod 764 {{ zato_env_path }}/start-*.sh

- name: Set extlib structure (02)
  when: zato_ext_lib_dir
  shell: |
    chown -R zato:zato /opt/zato
    rm -rf /opt/zato/current/extlib
    ln -s /tmp/zato-extlib /opt/zato/current/extlib
    chown -R zato:zato /opt/zato

- name: Start the quickstart environment (scheduler) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-scheduler-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0

- name: Start the quickstart environment (server) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-server-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0

- name: Start the quickstart environment (dashboard) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-web-admin-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0

- name: Start the quickstart environment (load balancer) (02)
  become: true
  become_user: "zato"
  shell: |
    ~/env/qs-1/start-load-balancer-fg.sh
  async: "{{ zato_async_timeout }}"
  poll: 0

- name: Waiting for the environment to start (02)
  become: true
  become_user: "zato"
  shell: |
    ~/current/bin/zato wait --path {{ zato_env_path }}/server1 --timeout 120 --silent

- name: Check that the server started (02)
  uri:
    url: http://127.0.0.1:17010/zato/ping

- name: Check that the load-balancer started (02)
  uri:
    url: http://127.0.0.1:11223/zato/ping

- name: Set passwords and config directory (02)
  become: true
  become_user: "zato"
  shell: |
    # Set Dashboard password
    ~/current/bin/zato update password {{ zato_env_path }}/web-admin admin --password "{{ zato_password or zato_dashboard_admin_password }}" --verbose

    # Set IDE password
    ~/current/bin/zato set-ide-password {{ zato_env_path }}/server1 --password "{{ zato_password or zato_ide_publisher_password }}" --verbose

    # Make sure the directory for config files exists
    mkdir -p /tmp/zato-user-conf/

- name: Make sure config files are owned by user zato (02)
  shell: |
    chown -R zato:zato /opt/hot-deploy/user-conf/
    chown -R zato:zato /tmp/zato-user-conf/

- name: Make sure config files are deployed (02)
  become: true
  become_user: "zato"
  shell: |
    touch -c /opt/hot-deploy/user-conf/*
    touch -c /tmp/zato-user-conf/*

- name: Run the pre-enmasse script (02)
  when: zato_pre_enmasse_script
  shell: |
    /usr/bin/bash /tmp/zato-pre-enmasse-script.sh

- name: Run enmasse (02)
  become: true
  become_user: "zato"
  shell: |
    # Run enmasse -> /opt
    ~/current/bin/zato enmasse {{ zato_env_path }}/server1 --import --input /opt/hot-deploy/enmasse/enmasse.yaml --env-file /opt/hot-deploy/enmasse/env.ini --replace-odb-objects --exit-on-missing-file --verbose

    # Run enmasse -> /tmp
    ~/current/bin/zato enmasse {{ zato_env_path }}/server1 --import --input /tmp/enmasse.yaml --env-file /tmp/env.ini --replace-odb-objects --exit-on-missing-file --verbose

- name: Run the post-install script (02)
  when: zato_post_install_script
  become: true
  become_user: "zato"
  shell: |
    /usr/bin/bash /tmp/zato-post-install-script.sh

- name: Run internal tests (it may take 10+ minutes) (02)
  when: zato_run_internal_tests
  become: true
  become_user: "zato"
  shell: |
    export PATH=$PATH:~/current/bin
    cd {{ zato_tests_base_dir }}
    make run-tests
